#include "da_config.inc"
module da_output_mod

    use coupler_config, only:case_name, atm_mpas_sceneid, num_lon, num_lat, num_lev
    use da_namelist_mod, only:lonstep=>obs_stat_interval_lon, latstep=>obs_stat_interval_lat, &
                         zstep=>obs_stat_interval_vertical, mpas_num_lev
    use redis_mod

    implicit none

contains

    subroutine da_output(rc, latids, latide, lonids, lonide, da_2d_num, da_3d_num, da_var_name_list, date_char, axb, axa)

        type(c_ptr), intent(in) :: rc !redis connect
        integer, intent(in) :: latids, latide, lonids, lonide !进程起止经纬度id号
        integer, intent(in) :: da_2d_num, da_3d_num
        character(len = 20), dimension(da_2d_num+da_3d_num), intent(in) :: da_var_name_list ! var sort of axb and axa
        character(12), intent(in) :: date_char ! time %y%m%d%hh%mm
        axb_type, intent(in) :: axb(da_2d_num+da_3d_num*num_lev, latide-latids+1, lonide-lonids+1) ! mean bg field
        axb_type, intent(in) :: axa(da_2d_num+da_3d_num*num_lev, latide-latids+1, lonide-lonids+1) ! mean an field

        integer :: i
        integer :: output_num_lev !输出总层数
        integer :: zids, zide !起止垂向id号
        character(5) :: num_lon_str, num_lat_str
        axb_type, allocatable :: amb_4d(:,:,:,:), axb_4d(:,:,:,:)
        character(256) :: hash_key_amb, hash_key_axb, var_key
 
        !print *, "Write backgroud field and amb field into redis."
       
        write(num_lon_str, "(i5)") num_lon
        write(num_lat_str, "(i5)") num_lat
        
        hash_key_amb = "ambfield:" //trim(adjustl(case_name)) //":" // &
                       trim(adjustl(atm_mpas_sceneid)) // ':' //&
                       trim(adjustl(num_lon_str)) // "x"// trim(adjustl(num_lat_str)) // &
                       ":" //trim(adjustl(date_char))
        hash_key_axb = "axbfield:" //trim(adjustl(case_name)) //":" // &
                       trim(adjustl(atm_mpas_sceneid)) // ':' //&
                       trim(adjustl(num_lon_str)) // "x"// trim(adjustl(num_lat_str)) // &
                       ":" //trim(adjustl(date_char))

        if (da_2d_num .ne. 0) then

            var_key = trim(adjustl(da_var_name_list(1)))
            do i=2, da_2d_num
                var_key = trim(adjustl(var_key)) //':'//trim(adjustl(da_var_name_list(i)))
            end do
 
            call RedisHmsetd2d(rc, hash_key_amb, var_key, lonids, lonide, lonstep, &
                 latids, latide, latstep, da_2d_num, &
                 axa(1:da_2d_num, :, :) &
                -axb(1:da_2d_num, :, :))
            call RedisHmsetd2d(rc, hash_key_axb, var_key, lonids, lonstep, lonide, &
                 latids, latstep, latide, da_2d_num, &
                 axb(1:da_2d_num, :, :))

        endif

        if (da_3d_num .ne. 0) then
            var_key = trim(adjustl(da_var_name_list(1+da_2d_num)))
            do i=2+da_2d_num, da_2d_num+da_3d_num
                var_key = trim(adjustl(var_key)) // ':' // trim(adjustl(da_var_name_list(i)))
            end do

            allocate(amb_4d(da_3d_num, mpas_num_lev, latide-latids+1, lonide-lonids+1))
            allocate(axb_4d(da_3d_num, mpas_num_lev, latide-latids+1, lonide-lonids+1))

            do i=1, da_3d_num
!                output_num_lev = ( mpas_num_lev - mod(mpas_num_lev, 4) ) / 4 + 1
                zids = da_2d_num + (i-1) * mpas_num_lev+1
                zide = da_2d_num + i * mpas_num_lev
                amb_4d(i, :, :, :) = axa(zids:zide, :, :) - axb(zids:zide, :, :)
                axb_4d(i, :, :, :) = axb(zids:zide, :, :)
            end do
            !print *, 'output:',mod(mpas_num_lev-1, zstep)+1, mpas_num_lev, zstep
            !print *,hash_key_amb,var_key
            call RedisHmsetd3d(rc, hash_key_amb, var_key, lonids, lonide, lonstep, &
                 latids, latide, latstep, mod(mpas_num_lev-1, zstep)+1, mpas_num_lev, zstep, da_3d_num, amb_4d)
            call RedisHmsetd3d(rc, hash_key_axb, var_key, lonids, lonide, lonstep, &
                 latids, latide, latstep, mod(mpas_num_lev-1, zstep)+1, mpas_num_lev, zstep, da_3d_num, axb_4d)

            deallocate(amb_4d)
            deallocate(axb_4d)
        endif
  end subroutine da_output
end module da_output_mod

